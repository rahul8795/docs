***********************************************************
Tech :
-------------
1. Pre-requisite
2. JDBC
3. SERVLETS
4. JSPS
5. JSF/Sturts

Databases :
----------
1. Oracle
2. MySQL


JDBC - java database connectivity

Servlet - server side program (server execute the the servlet program )

Servers :
------------
1: Tomcat
2: Weblogic
3. JBOSS[Wildfly]
4. Glassfish

IDEs :
---------
1. Editplus
2. Eclipse/My Eclipse
3. Netbeans


*********************************************************************
-----------------------------------------------------------
Pre-Requisite
-------------
1. Eclipse IDE utilization
--------------------------------------
 1. Download and inatall Eclipse IDE.
 2. Create Java Project in Eclipse IDE
 3. Cerate Main class in Java project
 4. Provide application logic in main() method
 5. run Java project 
 6. Add JDBC JAR file /* when using jdbc 


2. Classes, Abstract Classes, Intefaces
-----------------------------------------
************************************************
Class:
-------
Class is a container, it able to allow ohter programming elements like variables
and Methods,blocks,.....

In java applications, classes are able to represent all real world entities.
EX. Student, Customer, Account,.......

Steps to use classes in java applications :
-------------------------------------------
1. Declare a class by using "class" keyword.
2. Declare variables and methods inside class.
3. In main class, in main() method, create object for the respective class.
4. Access members of the class. 

In Java, there are two types of ,methods.
1. Concreate Method
2. Abstract Method	

Concreate method will have both method decalration part and method implementation 
part.
EX:
---
void add(int i, int j)
{
	int k = i + j;
	System.out.println(k);
}

Abstract Method is Java method, it woll have only method delaration without method 
implementation.
EX:
---
abstract void add(int i,int j);

*********************************************************

Abstract class :
------------------------
--> It will have both Concreate methods and abstract method.
EX :
----------
class A{
 ------
}

A a = new A();
Note :
:- 'new A()' is creating object in memory and store it into a variable 'a'.
:- 'a' is reference variable not an object.

-->For abstract classes, we are unable to create objects, but,
    we are able to create reference variables.
Ex :
-----
abstract class A{
------
}
A a = new A(); ----> error bcoz creating object
A a = null; ----> no error bcoz creating reference of the abstract class

Procedure to use abstract classes in JAVA applications :
------------------------------------------------------------------------------------
1. Declare abstract class by using "abstract" keyword
2. Delcare variables and methods in abstract class
3. Decalre a sub class for the abstract class
4. Provide implementation for abstraction methods inside sub class
5. In main class, in main() method, create object for the sub class and 
    declare the reference variable either for abstract class or for sub class
6. Access abstract class members. 

Question : What is the difference between declaring a reference variable of
	sub class and abstract class?
Answer : 	If we declare reference variables for abstract class then we are 
	able to access only abstract class members, we are unable to
	access sub class own members, but, If we declare reference
	variables for sub class then we are able to access both abstract
	class members and sub class own members.

*************************************************************
Interfaces :
------------------------
--> Interfaces are able to allow only abstract methods.
--> For interfaces, we are able to declare reference variables but we are unable
    to create objects.
--> Inside interfaces, bydefault, all variables are "public static final", not
    required to declare explicitly.
--> Inside interfaces, bydefault, all methods are "public and abstract", not 
    required to declare explicitly.

Procedure to use interfaces in JAVA applications :
---------------------------------------------------

1. Declare an inteface by using "interface" keyword.
2. Declare variables and methods inside the interface.
3. Declare an implementation class for the interface.
4. Provide implementation for all the abstract methods inside implementaion class.
5. In main class, in main() method, create object for implementation class and 
   declare reference variable either for interface or for implementation class.
6. Access interface members.

Question : What is the difference between declaring a reference variable of
	Interface and implement class?
Answer : If we declare reference variables for Interface  then we are 
	able to access only Interface  members, we are unable to
	access implement class own members, but, If we declare reference
	variables for implement class then we are able to access both Interface 
        members and implement class own members.

Ex:
----
class A{
   static int i = 10; 
   int j =10;
}
A a = new A();
System.out.println(a.i);
System.out.println(A.i);
System.out.println(a.j);
System.out.println(A.j);--> error bcoz j is not static variable

********************************************************

3. Static keyword(variavle,method,block)
-----------------------------------------
Static Keyword :
-----------------
'static' is a Java keyword, it can be used to improve sharability.

There are three ways to use static keyword.
1. Static variables
2. Static methods
3. Static Blocks

1. Static variables
---------------------
--> Static variables are recognized and initialized at the time of loading the
    respective class bytecode to the memory.
--> In java applications, static variables data will be stored in Method Area.
--> In java application, we are able to access static variables either by using 
    class name directly or by using reference variable of the respective class.
--> In java applications, static variabels must be declared as class level 
    variables only, not as local variables, if we are trying to declare local
    variabless as static variables then compiler will raise an error.
--> In java applications, single copy of static variables data will be shared to
    all the objects of the respective class.    

2. Static methods
-------------------
--> Static methods are java methods, they will be recoginized and executed the 
    moment when we access that method.
--> Static methods are accessed either by using class name directly or by using 
    reference variables of the respective class.
--> Static methods are able to allow only static members of the current class,
    static methods are not allowing isntance of the current class.
--> Static methods are not allowing 'this' keyword.



3. Static Blocks
--------------------
--> Static block is set of instructions which are recognized and initialized at 
    the time of loading the respective class bytecode to the memory.
--> Static blocks are able to allow only static members of the current class,
    Static blocks are not allowing instance members of the current class.
    Note: Inside the static block, we want to access instance members then we 
          have to create object for the respective class and we have to use the
          genereated reference variable.
--> Static blocks are not allowing this keyword.

Syntax:
--------
static {

   -----instructions------
}

*****************************************************************************
4. Class.forName() and newInstance() method:
------------------------------------------------

In Java applications, to load class bytecode to the memory without creating
object for the respective class we have to use the following method from 
java,lang.Class .

public static Class forName(String className)throws ClassNotFoundException


After loading class bytecode to the memory, if we want to create object 
for the loaded class explicitly then we have to use the following method from
java.lang.Class .

public Object newInstance() throws InstantiationException, IllegalAccessException

Note:
1. If constructor is parameterized and private with parameterized then throws 
    InstantiationException.
2. If constructor is private then throws IllegalAccessException.

************************************************************

5. Dynamic Input Approaches(Buffer Reader, Scanner, Console )
----------------------------------------------------------
***********************************************************
Stream:
--------
Stream is a channel or medium, it can be used data from Input devices to
Java application and from Java application to output devices.

Input Devices : Keyboard, Mouse, Network....
Output Devices : Monitor, Network, Printer,.....

There are two types of Streams
1. Byte Oriented Streams
2. Character Oriented Streams


1. Byte Oriented Streams :
----------------------------
These streams are able to allow data in the form of bytes from Input devices
to Java application and from Java Application to Output Devices.

There are two types of byte oriented streams.
1. InputStream :
-----------------
It able to allow data in the form of bytes from Input devices to Java application
Ex.
ByteArrayInputStream
FileInputStream
DataInputStream
BufferedInputStream
------
------

2. OutputStream :
------------------
It able to allow data in the form of bytes from Java application to output devices.
Ex.
ByteArrayOutputStream
FileOutputStream
BufferedOutputStream
DataOutputStream
PrintStream
------
------

Note: All Byte Oriented Stream classes are ended with 'Stream'.


2. Character Oriented Streams:
-------------------------------
These streams are able to allow data in the form of characters from Input devices
to java application and from java application to output devices.


There are two types of Character Oriented Streams
1. Reader:
-----------
It able to carry data in the form of characters from Input devices to java application
Ex.
BufferReader
InputStreamReader
CharArrayReader
FileReader
--------
--------

2. Writer
----------
It able to carry data in the form of characters from Input devices to java application.
Ex.
PrintWriter
FileWriter
BufferedWriter
CharArrayWriter
-----------
-----------
Note: All Character Oriented Streams are ended either with 'Reader' or with 'Writer'


***********************************************************


Dynamic Input Approaches:
--------------------------
If we provide input data to the java application at runtime then that input data is 
called as Dynamic Input.

There three ways to provide dynamic input.
1. By using BufferReader
2. By using Scanner
3. By using Console

1. By using BufferReader
----------------------------
BufferReader br = new BufferReader(new InputStreamReader(System.in));

Note: System.in - 'System' is class and 'in' is a static variable

Q) What is the difference readLine() and read() method in BufferedReader?
---------------------------------------------------------------------------
Ans:
----
readLine() : it will read a line of data as a string
	     public String readLine()

read() : it will read single character in the form of its ASCII value.
 	    public int read()

public static xxx parseXxx(String value)

byte ------------------> java.lang.Byte
short -----------------> java.lang.Short
int --------------------> java.lang.Integer
long --------------------> java.lang.Long
float --------------------> java.lang.Float
double --------------------> java.lang.Double
char --------------------> java.lang.Char
boolean --------------------> java.lang.Boolean
 

public static xxx parseXxx(String value)

public static int parseInt(String value)throws NumberFormatException
public static int parseFloat(String value)throws NumberFormatException
public static int parseLong(String value)throws NumberFormatException


Drawbacks:
------------
1. We have to use two steps to read primitive data as dynamic input.
   a) Read data as String by using readLine()
   b) Convert data from String to primitive types by using Wrapper Classes


2. By using Scanner:
----------------------
By using java.util.Scanner we are able to read primitive data directly.
Steps:
-------
1. Create Scanner class object.
	Scanner s = new Scanner(System.in);
2. Read Dynamic Input through Scanner
	a) For primitve data
		public xxx nextXxx()
		xxx ---> byte, short, int.....
		public int nextInt()
		public float nextFloat()
	b)For String Data
		public String nextLine()
		public String next() 

Q)What are the difference between naxt() and nextLine() method?
---------------------------------------------------------------
Ans :
-----
next(): It will read only one word
nextLine(): It will read the total line


3. By using Console
---------------------
Drawbcks with BufferedReader and Scanner
-----------------------------------------

Ex.
-------
import java.io.*;
class Test
{
	public static void main(String[] args)throws Exception
	{
		Console c = System.console();
		String uname = c.readLine("User Name :");
		char pwd = c.readPassword("Password :");
		String upwd = new String(pwd);

		if(uname.equals("durga") && upwd.equals("durga"))
		{
			System.out.println("Login Success");
		}
		else
		{
			System.out.println("Login Failure");
		}


		int fval = Integer.parseInt(c.readLine("first value : "));
	}
}

************************************************************
6. FileInputStream and FileOutputStream

FileOutputStream:
---------------------
To send data from Java application to a particular target file.

FileInputStream:
---------------------
To get data from a particualr source file to java application.

*************************************************************

7. throws keyword and try-catch-finally
----------------------------------------

Exception : It is Runtime Error, it will provide abnormal terminations to the 
	applications.

There are two types of exceptions.
1. Checked Exception 
----------------------
Checked exception are the exceptions which are predicted at compilation time
, they are not occured at compilation time.
Ex : IOException, SQLException, IntruptedException


2. Uncheked Exception
----------------------
Unchecked exceptions are the exceptions which are not recognized by Compiler,
which are recognized at rumtime by JVM.

Ex : ArithmeticException, NullPointerException, ArrayIndexOfBoundsException,....


In java, there are two ways to handle exceptions.
1. By using 'throws' keyword
2. By using 'try-catch-finally' keyword

throw keyword:
---------------
If we want to raise exceptions intentionally then we have to use throw keyword.

throw new ExceptionName([Param_Values]);

Ex.
-----
import java.io.*;

class Test
{
	public static void main(String[] args)
	{
		throw new RuntimeException("My own Exception");
	}
}


throws keyword :
-----------------
The main intention of 'throws' keyword is to bypass exception from present method
to caller method.

Ex.
----
import java.io.*;

class A
{
	void add()throws IOException
	{
		concat();
	}
	//void concat()
	//{
		throw new IOException("My IO EXception");
	//}
	void concat()throws IOException
	{
		throw new IOException("My IO EXception");
	}

}
class Test
{
	public static void main(String[] args)throws Exception
	{
		A a = new A();
		a.add();
	}
}

try-catch-finally:
-------------------

To handle the exception where it is generated we will use try-catch-finally.
Syntax:
--------
try
{
   ------
}
catch(ExceptionName refVar)
{
   -------
}
finally
{
   ------
}

try block:
------------
---> It able to include a set of instructions which may  raise an exception.
---> If we have an exception in tey block then JVM will bypass flow of execution
     to the catch block with out executing remaining instructions in try block.
---> If no exception is existed in try block then JVM will execute  the total try 
     block, at the end of try block JVM bypass flow of execution to finally block.


catch block:
-------------
---> It will be executed when exception is raised in try block.
---> It will catch the exception from try block and it will display exception
     details on console.
---> To display exception details, we will yse the following three ways.
	1)By using printStackTrace() method
	2)By using System.out.println(e);
	3)By using System.out.println(e.getMessage());

1. By using printStackTrace() Method:
--------------------------------------------------------
It will display the execution details like Name of the exception, description of the 
exception and location of the exception.

2) By using System.out.println(e):
--------------------------------------------------
It will display the exception details like name of the exception and description
of the exception.

3)By using System.out.println(e.getMeassage());:
-------------------------------------------------------------------------
It will display the only description of the exception.

finally:
------------
--> It will inlcude a set of instruction which must be executed by JVM
irrespective of getting exceptions in try block and irrespective of executing
catch block.

Note : In general, we will open the resources like Streams, Database Connection,....
in try block and we must close in them in finally block, because, finally block will
guarantee for execution.  
***************************************************************

8. Basics of Collection Framework 
