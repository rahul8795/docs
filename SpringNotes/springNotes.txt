Spring:
--------
1. Core Module
2. JDBC/DAO Module
   1. Load and Register Driver
      Class.forName("oracle.jdbc.OracleDriver");
   2. Establish Connection between Java application and database
      Connection con = DriverManager.getConnection("
      jdbc:oracle:thin:@localhost:1521:xe","system","root");
   3. Create either Statement or preparedStatement or CallableStatement :
      Statement st = con.createStatement();
   4. Write and execute SQL queries:
      ResultSet re = st.executeQuery("select *from emp1");
      int rowCount = st.executeUpdate("insert into emp1 values(-----)");
      boolean b = st.execute("update emp1 set ESAL = ESAL + 5000 where ESAL < 10000");
   5. rs.close();
      st.close();
      con.close();


jdbcTemplate.execute("select *from emp1");

3. Spring ORM Module:
-------------------------
1. Create Configuration Object
   Configuration cfg = new Configuration()
   cfg.configure();

2. Create SessionFactory Object
   SessionFactory sf = cfg.buildSessionFactory();

3. Create Session object:
   Session s = sf.openSession();

4. Create Transactions Object.
   Transaction tx = s.beginTransaction();

5. Perform Database Opeartions
   int k_Val = s.save(emp);

6. tx.commit();

7. Close the resources:
   s.close();
   sf.close();

HibernateTemplate

hibernateTemplate.save(emp);


Spring AOP:
-------------


Spring Transaction:
--------------------

Spring Web Module:
--------------------
Web and Web MVC


Spring Security:
----------------
Spring-1:
---------
1. Core Module
2. AOP
3. JDBC/DAO
4. ORM
5. Transaction
6. Web and Web MVC
7. Security


1. MAVEN
2. LOG4J
3. JUNIT
Spring-2:
--------------
1. Spring Boot
2. Spring JPA
3. Spring Data-JPA
4. Spirng Cloud
5. Spring Micro Services
6. Spring Social
7. Spring Batch
------
--------

Eclipse, STS
Oracle, MySQL
Tomcat, Weblogic, JBOSS or Wildfly, Glassfish
--------------------------------------------------
1. Introduction:
-----------------
Enterprise:It is a Business Organization, it is a group of organization running under single label.

Enterprise Application: It is a Software Application designed for a enterprise, it will
simplify the internal business processing.


1. User Interface Layer / Presentation Layer 
   1. Starting Point to access our application
   2. It will improve look and feel to the enterprise application.
   3. It will take data from users inorder to submit to enterprise application.
   4. To perform Client Side Data Validations with JavaScript functions.
   5. To sent different types of requests from client to Server.
   6. Presentation Logic --> AWT, SWING, JAVS FX, HTML, JSP, .....Struts, JSF,.....

2. Business Processing Layer
   1. It is Heart of the Enterprise Applications,
      It can be used to define and execute all Business
      rules and regulations which clients exactly required.
   2. To prepare this layer we have to use a separete logic 
      called as business logic.
   3. To prepare Business Logic, we have to use a set of 
      technology Java Beans, Servlets, EJBs,....

3. Data Storage and Access Layer / Persistence Layer
   1. It is last layer in Enterprise Application develoment.
   2. Its main intention is to interact with database and to 
      perform operations as per the Business Rules and regualtions.
   3. To prepare this layer, we will use a separate logic 
      called as Persistence logic.
   4. JDBC, JPA, Tooplink,...Hibernate, EJBs-Entity Beans,.....

System Architecture:
---------------------
1. 1-Tier Arch
2. 2-Tier Arch
3. 3-Tier Arch
   ----
   ----
   n-Tier Arch

1. 1-Tier Arch:
---------------
    0. we will provide all the enterprise application layer in a single 
       machine.
    1. It is highly recomended for Standalone Application.
    2. All Three layers must be managed by single
       Machine, so single Machine resources may not
       be sufficient to execute enterprise application.
    3. It will reduce applicaiton performance.
    4. It is providing only Single User environment.
    5. It is not providing Database Sharability and Components Sharability.
    6. It is providing tightly coupled architecture.

2-Tier Arch:
------------
--> In 2-Tier arch, we will provide the complete enterprise application in two macnines.
--> In Tier-1 Machine we will use User Interface Layer and Business Processing Layer,
    in Tier-2 Machine we will use Data Storage and Access Layer.
-->  2-Tier Arch is able to provide loosly coupled design when comaored with 1-Tier Arch.
--> 2-Tier Arch is recomended for Enterprise Applicaitons and it is conventional Arch for 
    Enterprise Applicaitons.
--> 2-Tier Arch is able to improve Database Sharability.
--> Still 2-Tier Arch is not providing clearcut seperation between presentation layer 
    and Data Storage and Access Layer.
--> It is providing database sharability but it is not providing component sharability.
--> It is not suitable for Standalone Applications.
--> When compared with 1-Tier Arch, 2-Tier Arch will improve applications performance, 
    but, maintanence cost will be increased.

3-Tier Arch:
-------------


Types of Enterprise Applications:
-----------------------------------




Q) What is the difference between Web Applications and Distributed Applications?
----------------------------------------------------------------------------------------------------------------------------
Ans:
---------
1. Web Application is a Client-Server application, where in web applications the
complete application logic will be distributed at Server Machine onle.

Distributed Application is a Client-Server Application, where in Distributed 
Applications the complete application logic will be distributed over both Client Machine
and Server Machine.

2. In case of Web Applications, Client is fixed, that is, Browser.

   In case of Distributed Applications, Client is not fixed, it may be a core java program
with main() method, A GUI application with actionPerformed() method, a servlet, a JSP page,
Frameworks applications like Struts, JSF,.........

3. If we want to prepare web application we have to use a seprate set of tech called as 
Web Tech.
Ex. CGI, Servlets, JSPs, JSTL, EL, .....
If we want to prepare Distribted Application, we need a set of tech called as 
Distributed Tech.
Ex. Socket Programming, RMI, CORBA, Web Services,......

4.The main intention of Web Applications is to generate dynamic response from server.
  
  The main intention of Distributed Applications is to established communication between
Local machine and Remote Machine and to generate remote Services from Remote Machine.

5. Web Applications are executed by both Web Servers and Applications Servers.
    Distributed Applications are executed by only Application Servers.

6. Web Application is the collection of Web Components like Serlets, JSPs, .... which
   are executed by the Web Containers like Servlet Container and JSP Container ........

  Distributed Applications is the collection of EJB components, which are executed by EJB Container.


To prepare Web Applications, SUN Microsystems has given two design Models.
1. Model-I Arch [MVC1]
2. Model-II Arch [MVC2]


1. Model-I Arch:
-----------------------------
--> It is also called JSP Front Arch or Page Centric Arch


2. Model-II Arch
------------------------------
--> It is pure MVC implementation.
--> It is also called Servlet Front Arch or Servlet Centric Arch
--> Some framework like Struts, JSF, XWORKS2....... are designed on the basic of Model-II Web
application arch only,intern, Structs and JSF are MVC based Frameworks.


MVC Arch ind its Rules and Regulations:
---------------------------------------------------------------
--> MVC is a design pattern, it will provide standard tamplate to prepare web
applications.
--> MVC is a design pattern, it will define standard flow of execution for the web
applications.

1. In MVC based applications, controller must be Servlet, a set of JSP pages must be view part.
2. In MVC based web applications, only one Controller must be provided.
3. In MVC based web applications, every request must be provided to Controller only and
    every response must be generated by view part.
    Note: We must not send any request to View part and we must not generate any response
             from controller.
4. In MVC based web applications, Controller and view part are not responsible to interact with
    with databases, they may interact with database through Model component only.
5. In MVC based applications, Controller is responsible to set data to the Model
    Component and View is responsible to get Data from model component.
6. In MVC based web applications, we can write any no of JSP pages as View part, but, we
    must provide all these JSP pages as Java Code Less.
7. In MVC web applications, we can provide any no of JSP pages as View part, where 
    we must not provide Page-To-Page communication, where we must provide
    page-controller-page communication.


Q) To design web applications we have the tech like Servlets and JSPs, To run web
     applications we have Servers like Tomcat, weblogic,....,to simplify web application
     development we have already some IDEs like Eclipse, MyEclipse, Netbeans,.... to preapare
     web applications with standardization we have web application models like Model-I arch
     and Model-II arch,.....,still;, what is the requirement to usr Frameworks?
Ans:
---------
Common : Controller and generic services ----> takes 70% of the actual appl implmentation. 
Variable : JSP pages and Model ------> takes only 30% of the actual implementatiaon.


If any product provide 70% common implementation as predefined then developers work is
simplified, where Developers may provide only 30% of the remaining implementation. Here 
the third parties provided products which are providing 70% common implementation
called as "Framework".



Frameworks:
-------------

--> Framework is a Pre-Fabricated software components that programmer can reuse, share
and customize inorder to simplify Application development.

--> Framework is a semi implemented application, it will provide very good environment
to prepare enterprise applications as per developers convenience.

--> Framework is a collections of tools and APIs, it will provide very good 
envoronment to prepare enterprise applications in simplified manner.

Adv:
-----
--> Frameworks will provide standard template to design applications.
--> Frameworks will providing Standard flow of execution between components.
--> Frameworks are allowinf parallel development.
--> Frameworks are able to reduce Development time.
--> Frameworks are able to reduce development cost.
--> Frameworks are able to improve Productivity.

Types of Frameworks:
--------------------
1. Web Frameworks
2. Application Frameworks

Q) What is the difference between Web frameworks and Application frameworks?
-----------------------------------------------------------------------------
Ans:
----
Web frameworks will provide very good env to prepare and execute web applications only.
Ex. Struts, JSF, Xworks2

Application Frameworks are able to provide very good env to prepare and execute any type
of JAVA, J2EE applications like Standalone Appl, Web Appl, Distributed Appl, Database Related Appls......
EX: Spring Frameworks. 

Q) What are the differences between Struts, JSF, and Spring Framework?
-----------------------------------------------------------------------
Ans:
-----
1. Struts and JSF are web frameworks, which are used to prepare only web applications.

Spring frameworks is an applicaiton frameworksm, it will provide very good env to prepare
the applications like standalone appl, web appl, distributed appl,.....

2. Struts framework is able to provide focus on only controller layer.
   JSF framework is able to provide focus on view layer.
   Spring framework is able to focus on all the layers of enterprise appl.

3. Struts and JSF are designed mainly on MVC and its associated design patterns.
   Spring Frame's web MVC module is only designed on the top of MVC design pattern.

4. Struts and JSF are providing the generic services like I18N(Interalization), EH(Exception handling), Validations,.. but
   Struts and JSF are not providing support for middleware services like JAAS,
   JNDI, JTA, Java Mail,.....
   
   Spring framework is able to provide support for the generic Services like I19N, EH, data
   validations,... and the middleware services like JAAS, JNDI
   ,JTA, JAVA Mail,.....

5. Struts and JSF are not modularized frameworks, to prepare any simple application even
   we have to load the complete framework.

   Spring framework is modularized framework, to prepare any simple application it is not frquired to load the complete spring 
   framework, it is sufficient to load the required modules.

6. Struts and JSF are more API dependentm they not following POJO/POJI kind of
   implementations.
  
   Spring framework is less API dependent, it follows POJO/POJI kind of implementations.

7. It is difficult to perform debugging and testing over struts and JSF applicaton.
   
   It is very simple to perform debugging and testing over Spring Applicaiton.

8. Struts and JSF are heavyweight frameworks.
   Spring framework is light weight.

Struts and JSF:
---------------
public ActionForward execute(ActonsMapping, ActionForm, HttpServletRequest request,
HttpServletResponse response)throws Exception{
--------
}
Spring:
--------
public String doLogin(){
----
}

9. Struts and JSF are not providing inbuilt support for integrating the explicit
applications like EJB applocaitons, Hibernate Appl, Ajax Appl, JDBC Appl,...........

Spring framework has provided very good inbuilt support to integrate other tech
applications like EJBs, JDBC, Hibernate, Struts Appl, JSF appl,.........

10. To prepare view part, Struts and JSF are allowing the fundamental view tech like
Html, JSP.......

Spring framework is allowing the most advanced view tech Velocity, Freemarker,...
to prepare View part.

11. Struts and JSF are not having aspect orientation.
  
 Spring Framework is having aspet orientation support along with object
   orientation.

12. Struts and JSF are not having Testing Support[Developers Level Testing].

Spring Framework is providing testing support by having testing module.


Spring History
----------------
1. Home: Interface1
2. Author: Mr. Rod Johnson
3. Objective: To simplify and accelerate appl development.
4. Type: Open Source Framework
5. Type of Framework: Application Framework
6. Initial version: Spring1.0[Oct, 2004].
7. User Versions: Spring3.x, 4.x
8. Latest version: Spring5.x 
9. Website: http://spring.io
10. Designed on: JAVA, J2EE
11. Compatibility/Portability: Supported by all IDEs and Servers.
12. Tools: STS[Spring Tool Suit]

Spring Modules:
----------------
Spring1.x
-----------
1. Spring Core
2. Spring AOP
3. Spring DAO
4. Spring ORM
5. Spring Context
6. Spring Web
7. Spring Web MVC

Spring2.x
----------
1. Spring Core
2. Spring AOP
3. Spring DAO
4. Spring ORM
5. Spring JEE
6. Spring Web

Spring3.x
----------
1. Core Container
   Beans
   Core
   Context
   Expression language
2. AOP
3. Aspects
4. Instrumentation
5. Data Access and Integration
   Transactions
   JDBC
   OXM
   ORM
   JMS
6. Web
   Web
   Portlet
   Servlet
   Struts
7. Test


Spring4.x
-----------
1. Core Container
   Beans
   Core
   Context
   Spring Expression language
2. AOP
3. Aspects
4. Instrumentation
5. Messaging
6. Data Access and Integration
   Transactions
   JDBC
   OXM
   ORM
   JMS
7. Web
   Web
   Portlet
   Servlet
   WebSocket
8. Test

Spring5.x
-----------
1. Core Container
   Beans
   Core
   Context
   Spring Expression language
2. AOP
3. Aspects
4. Instrumentation
5. Messaging
6. Data Access and Integration
   Transactions
   JDBC
   OXM
   ORM
   JMS
7. Web
   Web
   Portlet
   Servlet
   WebSocket


Steps to preapare First Spring Application[Core Module]
--------------------------------------------------------
1. Download Spring Framework[Jars] from Internet.
2. Prepare Java Project in Eclipse IDE.
3. Preapre Spring Library with the required JAR files.
4. Prepare Bean class.
5. Prepare Spring Configuration file with Bean congfiguration
6. Preapare Test Application.



